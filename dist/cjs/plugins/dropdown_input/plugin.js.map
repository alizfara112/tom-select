{"version":3,"file":"plugin.js","sources":["../../../../src/plugins/dropdown_input/plugin.ts"],"sourcesContent":["/**\n * Plugin: \"dropdown_input\" (Tom Select)\n * Copyright (c) contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this\n * file except in compliance with the License. You may obtain a copy of the License at:\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\n * ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n *\n */\n\nimport TomSelect from '../../tom-select.js';\nimport * as constants from '../../constants.js';\nimport { getDom, setAttr } from '../../vanilla';\nimport { addEvent } from '../../utils';\n\n\nTomSelect.define('dropdown_input',function() {\n\tvar self = this;\n\n\tvar input = self.settings.controlInput || '<input type=\"text\" autocomplete=\"off\" class=\"dropdown-input\" />';\n\tinput = getDom( input );\n\n\tif (self.settings.placeholder) {\n\t\tsetAttr(input,{placeholder:self.settings.placeholder});\n\t}\n\n\tself.settings.controlInput = input;\n\tself.settings.shouldOpen = true; // make sure the input is shown even if there are no options to display in the dropdown\n\n\tself.hook('after','setup',()=>{\n\n\t\t// set tabIndex on wrapper\n\t\tsetAttr(self.wrapper,{tabindex:self.input.disabled ? '-1' : self.tabIndex});\n\n\n\t\t// keyboard navigation\n\t\taddEvent(self.wrapper,'keypress',(evt:KeyboardEvent) => {\n\n\t\t\tif( self.control.contains(evt.target) ){\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif( self.dropdown.contains(evt.target) ){\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// open dropdown on enter when wrapper is tab-focused\n\t\t\tswitch (evt.keyCode) {\n\t\t\t\tcase constants.KEY_RETURN:\n\t\t\t\t\tself.onClick(evt);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t});\n\n\t\tlet div = getDom('<div class=\"dropdown-input-wrap\">');\n\t\tdiv.appendChild(input);\n\t\tself.dropdown.insertBefore(div, self.dropdown.firstChild);\n\t});\n\n});\n"],"names":["TomSelect","define","self","input","settings","controlInput","getDom","placeholder","setAttr","shouldOpen","hook","wrapper","tabindex","disabled","tabIndex","addEvent","evt","control","contains","target","dropdown","keyCode","constants","onClick","div","appendChild","insertBefore","firstChild"],"mappings":";;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQAA,SAAS,CAACC,MAAV,CAAiB,gBAAjB,EAAkC,YAAW;AAC5C,MAAIC,IAAI,GAAG,IAAX;AAEA,MAAIC,KAAK,GAAGD,IAAI,CAACE,QAAL,CAAcC,YAAd,IAA8B,iEAA1C;AACAF,EAAAA,KAAK,GAAGG,cAAM,CAAEH,KAAF,CAAd;;AAEA,MAAID,IAAI,CAACE,QAAL,CAAcG,WAAlB,EAA+B;AAC9BC,IAAAA,eAAO,CAACL,KAAD,EAAO;AAACI,MAAAA,WAAW,EAACL,IAAI,CAACE,QAAL,CAAcG;AAA3B,KAAP,CAAP;AACA;;AAEDL,EAAAA,IAAI,CAACE,QAAL,CAAcC,YAAd,GAA6BF,KAA7B;AACAD,EAAAA,IAAI,CAACE,QAAL,CAAcK,UAAd,GAA2B,IAA3B,CAX4C;;AAa5CP,EAAAA,IAAI,CAACQ,IAAL,CAAU,OAAV,EAAkB,OAAlB,EAA0B,MAAI;AAE7B;AACAF,IAAAA,eAAO,CAACN,IAAI,CAACS,OAAN,EAAc;AAACC,MAAAA,QAAQ,EAACV,IAAI,CAACC,KAAL,CAAWU,QAAX,GAAsB,IAAtB,GAA6BX,IAAI,CAACY;AAA5C,KAAd,CAAP,CAH6B;;AAO7BC,IAAAA,cAAQ,CAACb,IAAI,CAACS,OAAN,EAAc,UAAd,EAA0BK,GAAD,IAAuB;AAEvD,UAAId,IAAI,CAACe,OAAL,CAAaC,QAAb,CAAsBF,GAAG,CAACG,MAA1B,CAAJ,EAAuC;AACtC;AACA;;AAED,UAAIjB,IAAI,CAACkB,QAAL,CAAcF,QAAd,CAAuBF,GAAG,CAACG,MAA3B,CAAJ,EAAwC;AACvC;AACA,OARsD;;;AAWvD,cAAQH,GAAG,CAACK,OAAZ;AACC,aAAKC,oBAAL;AACCpB,UAAAA,IAAI,CAACqB,OAAL,CAAaP,GAAb;AACD;AAHD;AAMA,KAjBO,CAAR;AAmBA,QAAIQ,GAAG,GAAGlB,cAAM,CAAC,mCAAD,CAAhB;AACAkB,IAAAA,GAAG,CAACC,WAAJ,CAAgBtB,KAAhB;AACAD,IAAAA,IAAI,CAACkB,QAAL,CAAcM,YAAd,CAA2BF,GAA3B,EAAgCtB,IAAI,CAACkB,QAAL,CAAcO,UAA9C;AACA,GA7BD;AA+BA,CA5CD;;"}
{"version":3,"file":"restore_on_backspace.js","sources":["../../../src/constants.ts","../../../src/utils.ts","../../../src/plugins/restore_on_backspace/plugin.ts"],"sourcesContent":["export const KEY_A\t\t\t\t= 65;\nexport const KEY_RETURN\t\t\t= 13;\nexport const KEY_ESC\t\t\t= 27;\nexport const KEY_LEFT\t\t\t= 37;\nexport const KEY_UP\t\t\t\t= 38;\nexport const KEY_RIGHT\t\t\t= 39;\nexport const KEY_DOWN\t\t\t= 40;\nexport const KEY_BACKSPACE\t\t= 8;\nexport const KEY_DELETE\t\t\t= 46;\nexport const KEY_TAB\t\t\t= 9;\n\nexport const IS_MAC      \t\t= typeof navigator === 'undefined' ? false : /Mac/.test(navigator.userAgent);\nexport const KEY_SHORTCUT\t\t= IS_MAC ? 'metaKey' : 'ctrlKey'; // ctrl key or apple key for ma\n","\nimport TomSelect from './tom-select';\n\n/**\n * Converts a scalar to its best string representation\n * for hash keys and HTML attribute values.\n *\n * Transformations:\n *   'str'     -> 'str'\n *   null      -> ''\n *   undefined -> ''\n *   true      -> '1'\n *   false     -> '0'\n *   0         -> '0'\n *   1         -> '1'\n *\n */\nexport function hash_key(value:string):string|null {\n\tif (typeof value === 'undefined' || value === null) return null;\n\tif (typeof value === 'boolean') return value ? '1' : '0';\n\treturn value + '';\n};\n\n/**\n * Escapes a string for use within HTML.\n *\n */\nexport function escape_html(str:string):string {\n\treturn (str + '')\n\t\t.replace(/&/g, '&amp;')\n\t\t.replace(/</g, '&lt;')\n\t\t.replace(/>/g, '&gt;')\n\t\t.replace(/\"/g, '&quot;');\n};\n\n\n/**\n * Debounce the user provided load function\n *\n */\nexport function loadDebounce(fn,delay:number){\n\tvar timeout: ReturnType<typeof setTimeout>;\n\treturn function(this:TomSelect, value:string,callback:() => void) {\n\t\tvar self = this;\n\n\t\tif( timeout ){\n\t\t\tself.loading = Math.max(self.loading - 1, 0);\n\t\t}\n\t\tclearTimeout(timeout);\n\t\ttimeout = setTimeout(function() {\n\t\t\ttimeout = null;\n\t\t\tself.loadedSearches[value] = true;\n\t\t\tfn.call(self, value, callback);\n\n\t\t}, delay);\n\t};\n}\n\n\n/**\n * Debounce all fired events types listed in `types`\n * while executing the provided `fn`.\n *\n */\nexport function debounce_events( self:TomSelect, types:string[], fn:() => void ) {\n\tvar type;\n\tvar trigger = self.trigger;\n\tvar event_args:{ [key: string]: any } = {};\n\n\t// override trigger method\n\tself.trigger = function(){\n\t\tvar type = arguments[0];\n\t\tif (types.indexOf(type) !== -1) {\n\t\t\tevent_args[type] = arguments;\n\t\t} else {\n\t\t\treturn trigger.apply(self, arguments);\n\t\t}\n\t};\n\n\t// invoke provided function\n\tfn.apply(self, []);\n\tself.trigger = trigger;\n\n\t// trigger queued events\n\tfor (type in event_args) {\n\t\ttrigger.apply(self, event_args[type]);\n\t}\n};\n\n\n/**\n * Determines the current selection within a text input control.\n * Returns an object containing:\n *   - start\n *   - length\n *\n */\nexport function getSelection(input:HTMLInputElement):{ start: number; length: number } {\n\treturn {\n\t\tstart\t: input.selectionStart,\n\t\tlength\t: input.selectionEnd - input.selectionStart,\n\t};\n};\n\n\n/**\n * Prevent default\n *\n */\nexport function preventDefault(evt?:Event, stop:boolean=false):void{\n\tif( evt ){\n\t\tevt.preventDefault();\n\t\tif( stop ){\n\t\t\tevt.stopPropagation();\n\t\t}\n\t}\n}\n\n\n/**\n * Prevent default\n *\n */\nexport function addEvent(target:EventTarget, type:string, callback:EventListener, options?:object):void{\n\ttarget.addEventListener(type,callback,options);\n}\n\n\n/**\n * Return true if the requested key is down\n * Will return false if more than one control character is pressed ( when [ctrl+shift+a] != [ctrl+a] )\n * The current evt may not always set ( eg calling advanceSelection() )\n *\n */\nexport function isKeyDown( key_name:keyof (KeyboardEvent|MouseEvent), evt:KeyboardEvent|MouseEvent ){\n\n\tif( !evt ){\n\t\treturn false;\n\t}\n\n\tif( !evt[key_name] ){\n\t\treturn false;\n\t}\n\n\tvar count = (evt.altKey?1:0) + (evt.ctrlKey?1:0) + (evt.shiftKey?1:0) + (evt.metaKey?1:0);\n\n\tif( count === 1 ){\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n","/**\n * Plugin: \"restore_on_backspace\" (Tom Select)\n * Copyright (c) contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this\n * file except in compliance with the License. You may obtain a copy of the License at:\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\n * ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n *\n */\nimport TomSelect from '../../tom-select.js';\nimport * as constants from '../../constants.js';\nimport { preventDefault } from '../../utils';\n\nTomSelect.define('restore_on_backspace',function(options) {\n\tvar self = this;\n\n\toptions.text = options.text || function(option){\n\t\treturn option[self.settings.labelField];\n\t};\n\n\tvar orig_keydown = self.onKeyDown;\n\n\tself.hook('instead','onKeyDown',function(evt){\n\t\tvar index, option;\n\t\tif (evt.keyCode === constants.KEY_BACKSPACE && self.control_input.value === '' ) {\n\t\t\tindex = self.caretPos - 1;\n\n\t\t\t// selected item\n\t\t\tif( self.activeItems.length > 0 ){\n\t\t\t\toption = self.options[self.activeItems[0].dataset.value];\n\n\t\t\t// not selected item\n\t\t\t}else if( self.activeItems.length == 0 && index >= 0 && index < self.items.length) {\n\t\t\t\toption = self.options[self.items[index]];\n\t\t\t}\n\n\t\t\tif( option ){\n\t\t\t\tif (self.deleteSelection(evt)) {\n\t\t\t\t\tself.setTextboxValue(options.text.call(self, option));\n\t\t\t\t\tself.refreshOptions(true);\n\t\t\t\t}\n\t\t\t\tpreventDefault(evt);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t}\n\t\treturn orig_keydown.apply(self, arguments);\n\t});\n\n});\n"],"names":["KEY_BACKSPACE","IS_MAC","navigator","test","userAgent","preventDefault","evt","stop","stopPropagation","TomSelect","define","options","self","text","option","settings","labelField","orig_keydown","onKeyDown","hook","index","keyCode","constants","control_input","value","caretPos","activeItems","length","dataset","items","deleteSelection","setTextboxValue","call","refreshOptions","apply","arguments"],"mappings":";;;;;;;;;;;;;;;CAOO,MAAMA,aAAa,GAAI,CAAvB;CAIA,MAAMC,MAAM,GAAU,OAAOC,SAAP,KAAqB,WAArB,GAAmC,KAAnC,GAA2C,MAAMC,IAAN,CAAWD,SAAS,CAACE,SAArB,CAAjE;;;CCRP;;;;;;;;;;;;;;CAsGA;;;;;CAIO,SAASC,cAAT,CAAwBC,GAAxB,EAAoCC,IAAY,GAAC,KAAjD,EAA4D;CAClE,MAAID,GAAJ,EAAS;CACRA,IAAAA,GAAG,CAACD,cAAJ;;CACA,QAAIE,IAAJ,EAAU;CACTD,MAAAA,GAAG,CAACE,eAAJ;CACA;CACD;CACD;;CCpHD;;;;;;;;;;;;;;AAkBAC,8BAAS,CAACC,MAAV,CAAiB,sBAAjB,EAAwC,UAASC,OAAT,EAAkB;CACzD,MAAIC,IAAI,GAAG,IAAX;;CAEAD,EAAAA,OAAO,CAACE,IAAR,GAAeF,OAAO,CAACE,IAAR,IAAgB,UAASC,MAAT,EAAgB;CAC9C,WAAOA,MAAM,CAACF,IAAI,CAACG,QAAL,CAAcC,UAAf,CAAb;CACA,GAFD;;CAIA,MAAIC,YAAY,GAAGL,IAAI,CAACM,SAAxB;CAEAN,EAAAA,IAAI,CAACO,IAAL,CAAU,SAAV,EAAoB,WAApB,EAAgC,UAASb,GAAT,EAAa;CAC5C,QAAIc,KAAJ,EAAWN,MAAX;;CACA,QAAIR,GAAG,CAACe,OAAJ,KAAgBC,aAAhB,IAA2CV,IAAI,CAACW,aAAL,CAAmBC,KAAnB,KAA6B,EAA5E,EAAiF;CAChFJ,MAAAA,KAAK,GAAGR,IAAI,CAACa,QAAL,GAAgB,CAAxB,CADgF;;CAIhF,UAAIb,IAAI,CAACc,WAAL,CAAiBC,MAAjB,GAA0B,CAA9B,EAAiC;CAChCb,QAAAA,MAAM,GAAGF,IAAI,CAACD,OAAL,CAAaC,IAAI,CAACc,WAAL,CAAiB,CAAjB,EAAoBE,OAApB,CAA4BJ,KAAzC,CAAT,CADgC;CAIhC,OAJD,MAIM,IAAIZ,IAAI,CAACc,WAAL,CAAiBC,MAAjB,IAA2B,CAA3B,IAAgCP,KAAK,IAAI,CAAzC,IAA8CA,KAAK,GAAGR,IAAI,CAACiB,KAAL,CAAWF,MAArE,EAA6E;CAClFb,QAAAA,MAAM,GAAGF,IAAI,CAACD,OAAL,CAAaC,IAAI,CAACiB,KAAL,CAAWT,KAAX,CAAb,CAAT;CACA;;CAED,UAAIN,MAAJ,EAAY;CACX,YAAIF,IAAI,CAACkB,eAAL,CAAqBxB,GAArB,CAAJ,EAA+B;CAC9BM,UAAAA,IAAI,CAACmB,eAAL,CAAqBpB,OAAO,CAACE,IAAR,CAAamB,IAAb,CAAkBpB,IAAlB,EAAwBE,MAAxB,CAArB;CACAF,UAAAA,IAAI,CAACqB,cAAL,CAAoB,IAApB;CACA;;CACD5B,QAAAA,cAAc,CAACC,GAAD,CAAd;CACA;CACA;CAED;;CACD,WAAOW,YAAY,CAACiB,KAAb,CAAmBtB,IAAnB,EAAyBuB,SAAzB,CAAP;CACA,GAzBD;CA2BA,CApCD;;;;;;"}